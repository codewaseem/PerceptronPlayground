const originalData = {
  X1: [
    0.78051,
    0.28774,
    0.40714,
    0.2923,
    0.50922,
    0.27785,
    0.27527,
    0.43999,
    0.33557,
    0.23448,
    0.0084492,
    0.12419,
    0.25644,
    0.4591,
    0.44547,
    0.42218,
    0.49563,
    0.30848,
    0.39707,
    0.32945,
    0.40739,
    0.3106,
    0.49638,
    0.10073,
    0.69907,
    0.29767,
    0.15099,
    0.16427,
    0.33259,
    0.53741,
    0.19503,
    0.40278,
    0.21296,
    0.48447,
    0.25476,
    0.21726,
    0.67078,
    0.3815,
    0.53838,
    0.4849,
    0.37095,
    0.54527,
    0.32149,
    0.42216,
    0.10194,
    0.15254,
    0.45558,
    0.28488,
    0.27633,
    0.39748,
    0.5533,
    0.44274,
    0.85176,
    0.60436,
    0.68243,
    1,
    0.72989,
    0.67377,
    0.78761,
    0.71442,
    0.49379,
    0.78974,
    0.67905,
    0.6642,
    0.79396,
    0.70758,
    0.59421,
    0.49364,
    0.77707,
    0.79785,
    0.70876,
    0.69176,
    0.66408,
    0.65973,
    0.64574,
    0.89639,
    0.85476,
    0.62091,
    0.79057,
    0.58935,
    0.56846,
    0.65912,
    0.70938,
    0.59154,
    0.45829,
    0.79982,
    0.60974,
    0.68127,
    0.76694,
    0.69048,
    0.68122,
    0.73229,
    0.76145,
    0.58985,
    0.73145,
    0.77029,
    0.73156,
    0.44556,
    0.85275,
    0.51912
  ],
  X2: [
    -0.063669,
    0.29139,
    0.17878,
    0.4217,
    0.35256,
    0.10802,
    0.33223,
    0.31245,
    0.42984,
    0.24986,
    0.13658,
    0.33595,
    0.42624,
    0.40426,
    0.45117,
    0.20118,
    0.21445,
    0.24306,
    0.44438,
    0.39217,
    0.40271,
    0.50702,
    0.45384,
    0.32053,
    0.37307,
    0.69648,
    0.57341,
    0.27759,
    0.055964,
    0.28637,
    0.36879,
    0.035148,
    0.55169,
    0.56991,
    0.34596,
    0.28641,
    0.46538,
    0.4622,
    0.32774,
    0.26071,
    0.38809,
    0.63911,
    0.12007,
    0.61666,
    0.060408,
    0.2168,
    0.43769,
    0.52142,
    0.21264,
    0.31902,
    1,
    0.59205,
    0.6612,
    0.86605,
    0.48301,
    0.76815,
    0.8107,
    0.77975,
    0.58177,
    0.7668,
    0.54226,
    0.74233,
    0.60921,
    0.72519,
    0.56789,
    0.76022,
    0.61857,
    0.56224,
    0.35025,
    0.76921,
    0.96764,
    0.60865,
    0.92075,
    0.66666,
    0.56845,
    0.7085,
    0.63167,
    0.80424,
    0.56108,
    0.71582,
    0.7406,
    0.71548,
    0.74041,
    0.62927,
    0.4641,
    0.74847,
    0.54757,
    0.86985,
    0.64736,
    0.83058,
    0.96541,
    0.64245,
    0.60138,
    0.86955,
    0.74516,
    0.7014,
    0.71782,
    0.57991,
    0.85987,
    0.62359
  ],
  y: [
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  ]
};

function stepFunction(t) {
  if (t >= 0) return 1;
  return 0;
}

function linearFunction(X, W, b) {
  return X[0] * W[0] + X[1] * W[1] + b;
}

function predict(...args) {
  return stepFunction(linearFunction(...args));
}

function perceptron(
  data = [],
  y = [],
  weights = [],
  bais = 1,
  learning_rate = 0.01
) {
  for (let i = 0; i < y.length; i++) {
    let prediction = predict([data.X1[i], data.X2[i]], weights, bais);
    if (y[i] - prediction == 1) {
      weights[0] += data.X1[i] * learning_rate;
      weights[1] += data.X2[i] * learning_rate;
      bais += learning_rate;
    } else if (y[i] - prediction == -1) {
      weights[0] -= data.X1[i] * learning_rate;
      weights[1] -= data.X2[i] * learning_rate;
      bais -= learning_rate;
    }
  }
  return [weights, bais];
}

function trainPerceptron() {
  let initialWeights = [0.37454012, 0.95071431];
  let initialBais = 1.731993941811405;
  let epochs = 50;
  let lines = [];

  for (let i = 0; i < epochs; i++) {
    [initialWeights, initialBais] = perceptron(
      originalData,
      originalData.y,
      initialWeights,
      initialBais,
      0.01
    );
    lines.push([
      initialWeights[0] / initialWeights[1],
      (-1 * initialBais) / initialWeights[1]
    ]);
  }
  console.log(initialWeights, initialBais);
  return lines;
}

// trainPerceptron();
